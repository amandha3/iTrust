{
  "name": "fuzzer",
  "version": "0.2.1",
  "description": "a fuzzy input creator for tests",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "bin": {
    "fuzz-get": "./bin/fuzz-get"
  },
  "dependencies": {
    "random-js": "1.0.2",
    "traverse": "~0.6.6",
    "xtend": "~2.2.0"
  },
  "devDependencies": {
    "tap": "~0.4.8"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:mapbox/fuzzer.git"
  },
  "keywords": [
    "fuzzer",
    "fuzzy",
    "testing",
    "mutation"
  ],
  "author": {
    "name": "Tom MacWright"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mapbox/fuzzer/issues"
  },
  "homepage": "https://github.com/mapbox/fuzzer",
  "readme": "[![Build Status](https://travis-ci.org/mapbox/fuzzer.svg?branch=master)](https://travis-ci.org/mapbox/fuzzer)\n\n# fuzzer\n\nA [fuzzer](http://en.wikipedia.org/wiki/Fuzz_testing) for testing. This implements\nmutation fuzzing, in which an expect input is mutated (changed) many times\nin order to trigger unexpected behavior or crashes.\n\n## install\n\n    npm install fuzzer\n\n## api\n\n### fuzzer.mutate.object(obj)\n\nGenerate a mutated version of an object. This does not modify the object\ndirectly, but returns a modified copy. This mutation will increment and\ndecrement numbers, randomize arrays, remove properties, and more.\n\n### fuzzer.mutate.string(str)\n\nGenerate a mutated version of a string, with reversed, removed, and added\ncharacters.\n\n### fuzzer.seed(number)\n\nSeed the random number generator `random-js` that determines mutations.\nBy calling this function with the same number, you can generate the same\nmutations consistently.\n\n## fuzz-get\n\nIf you install this globally it provides a single cli utility called `fuzz-get`.\n\n    npm install -g fuzzer\n    fuzz-get \"./bin/fuzz-get \"http://localhost:8889/foo/bar/your/rest/api\"\n\nThis will run mutated requests against your server continously - it will mutate the\npath requested into other incorrect requests, and log in the form:\n\n    HTTP200:/foo/bar/your/rest/api\n    HTTP404:/foo/baryour/rest/api\n\nSo you can pipe into `| grep \"HTTP500\"` if you wish.\n\n## example\n\n```js\nvar test = require('tap').test,\n    fuzzer = require('fuzzer');\n\nfuzzer.seed(0);\n\ntest('something', function(t) {\n    var generator = fuzzer.mutate.object(yourTestingInput);\n    for (var i = 0; i < 1000; i++) {\n        t.doesNotThrow(function() {\n            yourLibrary(generator());\n        });\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "fuzzer@0.2.1",
  "_from": "fuzzer@^0.2.0"
}
